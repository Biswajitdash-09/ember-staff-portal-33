
/**
 * Report Content Generation Utilities
 * Handles creation of different report types with formatted content
 */

import { Employee } from '@/types/employee';

export interface ReportParams {
  reportType: string;
  dateRange: string;
  format: string;
  department: string;
}

export interface LeaveRequest {
  id: string;
  employee: string;
  type: string;
  days: number;
  startDate: string;
  endDate: string;
  status: string;
  appliedDate: string;
  reason?: string;
}

/**
 * Generate attendance report content
 */
export const generateAttendanceReport = (
  filteredEmployees: Employee[], 
  reportParams: ReportParams
): string => {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  
  return `
ATTENDANCE REPORT
================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

SUMMARY:
========
Total Employees: ${filteredEmployees.length}
Active Employees: ${filteredEmployees.filter(emp => emp.status === 'Active').length}
Departments Covered: ${reportParams.department || 'All'}

EMPLOYEE ATTENDANCE DETAILS:
===========================
${filteredEmployees.map(emp => `
Employee: ${emp.name} (${emp.id})
Department: ${emp.department}
Status: ${emp.status}
Join Date: ${emp.joinDate}
`).join('')}

ATTENDANCE SUMMARY BY DEPARTMENT:
================================
${Object.entries(filteredEmployees.reduce((acc, emp) => {
  acc[emp.department] = (acc[emp.department] || 0) + 1;
  return acc;
}, {} as Record<string, number>)).map(([dept, count]) => `${dept}: ${count} employees`).join('\n')}

Report Generated by: HR System Quick Actions
Report ID: ATT-${Date.now()}
  `.trim();
};

/**
 * Generate payroll summary report content
 */
export const generatePayrollReport = (
  filteredEmployees: Employee[], 
  reportParams: ReportParams
): string => {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  const totalSalary = filteredEmployees.reduce((sum, emp) => sum + emp.baseSalary, 0);
  const avgSalary = filteredEmployees.length > 0 ? totalSalary / filteredEmployees.length : 0;
  
  return `
PAYROLL SUMMARY REPORT
=====================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

PAYROLL OVERVIEW:
================
Total Employees: ${filteredEmployees.length}
Total Annual Salary: $${totalSalary.toLocaleString()}
Average Salary: $${Math.round(avgSalary).toLocaleString()}
Monthly Payroll: $${Math.round(totalSalary / 12).toLocaleString()}

EMPLOYEE SALARY DETAILS:
=======================
${filteredEmployees.map(emp => `
${emp.name} (${emp.id})
Department: ${emp.department}
Position: ${emp.role}
Annual Salary: $${emp.baseSalary.toLocaleString()}
Monthly: $${Math.round(emp.baseSalary / 12).toLocaleString()}
`).join('')}

DEPARTMENT SALARY BREAKDOWN:
===========================
${Object.entries(filteredEmployees.reduce((acc, emp) => {
  if (!acc[emp.department]) {
    acc[emp.department] = { count: 0, total: 0 };
  }
  acc[emp.department].count++;
  acc[emp.department].total += emp.baseSalary;
  return acc;
}, {} as Record<string, { count: number; total: number }>)).map(([dept, data]) => 
  `${dept}: ${data.count} employees, $${data.total.toLocaleString()} total, $${Math.round(data.total / data.count).toLocaleString()} average`
).join('\n')}

Report Generated by: HR System Quick Actions
Report ID: PAY-${Date.now()}
  `.trim();
};

/**
 * Generate leave analysis report content
 */
export const generateLeaveReport = (
  filteredLeaveRequests: LeaveRequest[], 
  reportParams: ReportParams
): string => {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  const pendingRequests = filteredLeaveRequests.filter(req => req.status === 'Pending');
  const approvedRequests = filteredLeaveRequests.filter(req => req.status === 'Approved');
  const rejectedRequests = filteredLeaveRequests.filter(req => req.status === 'Rejected');
  
  return `
LEAVE ANALYSIS REPORT
====================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

LEAVE REQUEST SUMMARY:
=====================
Total Requests: ${filteredLeaveRequests.length}
Pending: ${pendingRequests.length}
Approved: ${approvedRequests.length}
Rejected: ${rejectedRequests.length}

DETAILED LEAVE REQUESTS:
=======================
${filteredLeaveRequests.map(req => `
Request ID: ${req.id}
Employee: ${req.employee}
Type: ${req.type}
Duration: ${req.days} days
From: ${req.startDate} to ${req.endDate}
Status: ${req.status}
Applied: ${req.appliedDate}
Reason: ${req.reason || 'Not specified'}
`).join('')}

LEAVE TYPE BREAKDOWN:
====================
${Object.entries(filteredLeaveRequests.reduce((acc, req) => {
  acc[req.type] = (acc[req.type] || 0) + 1;
  return acc;
}, {} as Record<string, number>)).map(([type, count]) => `${type}: ${count} requests`).join('\n')}

Report Generated by: HR System Quick Actions
Report ID: LEV-${Date.now()}
  `.trim();
};

/**
 * Generate performance report content
 */
export const generatePerformanceReport = (
  filteredEmployees: Employee[], 
  reportParams: ReportParams
): string => {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  
  return `
PERFORMANCE REPORT
=================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

EMPLOYEE PERFORMANCE OVERVIEW:
=============================
Total Employees Evaluated: ${filteredEmployees.length}
Active Employees: ${filteredEmployees.filter(emp => emp.status === 'Active').length}

EMPLOYEE DETAILS:
================
${filteredEmployees.map(emp => `
Employee: ${emp.name} (${emp.id})
Department: ${emp.department}
Position: ${emp.role}
Join Date: ${emp.joinDate}
Status: ${emp.status}
Manager: ${emp.manager}
Tenure: ${Math.floor((new Date().getTime() - new Date(emp.joinDate).getTime()) / (1000 * 60 * 60 * 24 * 365))} years
`).join('')}

DEPARTMENT PERFORMANCE METRICS:
==============================
${Object.entries(filteredEmployees.reduce((acc, emp) => {
  if (!acc[emp.department]) acc[emp.department] = [];
  acc[emp.department].push(emp);
  return acc;
}, {} as Record<string, typeof filteredEmployees>)).map(([dept, emps]) => `
${dept} Department:
- Total Employees: ${emps.length}
- Active: ${emps.filter(e => e.status === 'Active').length}
- Average Tenure: ${Math.floor(emps.reduce((sum, e) => sum + Math.floor((new Date().getTime() - new Date(e.joinDate).getTime()) / (1000 * 60 * 60 * 24 * 365)), 0) / emps.length)} years
`).join('')}

Report Generated by: HR System Quick Actions
Report ID: PERF-${Date.now()}
  `.trim();
};

/**
 * Generate department overview report content
 */
export const generateDepartmentReport = (
  allEmployees: Employee[],
  filteredEmployees: Employee[], 
  reportParams: ReportParams
): string => {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  
  if (reportParams.department) {
    const deptSalary = filteredEmployees.reduce((sum, emp) => sum + emp.baseSalary, 0);
    
    return `
DEPARTMENT OVERVIEW REPORT
=========================
Generated: ${currentDate} at ${currentTime}
Department: ${reportParams.department}
Date Range: ${reportParams.dateRange}

DEPARTMENT SUMMARY:
==================
Department Name: ${reportParams.department}
Total Employees: ${filteredEmployees.length}
Active Employees: ${filteredEmployees.filter(emp => emp.status === 'Active').length}
Total Annual Salaries: $${deptSalary.toLocaleString()}
Average Salary: $${Math.round(deptSalary / filteredEmployees.length).toLocaleString()}

EMPLOYEE ROSTER:
===============
${filteredEmployees.map(emp => `
${emp.name} (${emp.id})
Position: ${emp.role}
Status: ${emp.status}
Join Date: ${emp.joinDate}
Salary: $${emp.baseSalary.toLocaleString()}
Manager: ${emp.manager}
`).join('')}

Report Generated by: HR System Quick Actions
Report ID: DEPT-${Date.now()}
    `.trim();
  } else {
    const deptStats = Object.entries(allEmployees.reduce((acc, emp) => {
      if (!acc[emp.department]) {
        acc[emp.department] = { count: 0, active: 0, totalSalary: 0 };
      }
      acc[emp.department].count++;
      if (emp.status === 'Active') acc[emp.department].active++;
      acc[emp.department].totalSalary += emp.baseSalary;
      return acc;
    }, {} as Record<string, { count: number; active: number; totalSalary: number }>));
    
    return `
ALL DEPARTMENTS OVERVIEW
=======================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}

COMPANY SUMMARY:
===============
Total Departments: ${deptStats.length}
Total Employees: ${allEmployees.length}
Active Employees: ${allEmployees.filter(emp => emp.status === 'Active').length}

DEPARTMENT BREAKDOWN:
====================
${deptStats.map(([dept, stats]) => `
${dept} Department:
- Total Employees: ${stats.count}
- Active Employees: ${stats.active}
- Total Salaries: $${stats.totalSalary.toLocaleString()}
- Average Salary: $${Math.round(stats.totalSalary / stats.count).toLocaleString()}
`).join('')}

Report Generated by: HR System Quick Actions
Report ID: ALL-DEPT-${Date.now()}
    `.trim();
  }
};

/**
 * Download file with given content and filename
 */
export const downloadFile = (content: string, filename: string, mimeType: string = 'text/plain') => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};
