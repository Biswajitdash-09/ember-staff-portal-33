
/**
 * Report Quick Actions Hook
 * Handles report generation quick actions
 */

import { useToast } from "@/hooks/use-toast";
import { useEmployeeData } from "@/hooks/useEmployeeData";
import { useLeaveData } from "@/hooks/useLeaveData";
import { 
  generateAttendanceReport, 
  generatePayrollReport, 
  generateLeaveReport, 
  generatePerformanceReport, 
  generateDepartmentReport,
  downloadFile,
  ReportParams 
} from "@/utils/reportGenerator";

export const useReportQuickActions = () => {
  const { toast } = useToast();
  const { allEmployees } = useEmployeeData();
  const { allLeaveRequests } = useLeaveData();

  const generateReportContent = (reportType: string, reportParams: ReportParams) => {
    // Filter employees by department if specified
    const filteredEmployees = reportParams.department 
      ? allEmployees.filter(emp => emp.department === reportParams.department)
      : allEmployees;

    // Filter leave requests by department if specified
    const filteredLeaveRequests = reportParams.department 
      ? allLeaveRequests.filter(req => {
          const emp = allEmployees.find(e => e.name === req.employee);
          return emp?.department === reportParams.department;
        })
      : allLeaveRequests;

    switch (reportType) {
      case 'Attendance Report':
        return generateAttendanceReport(filteredEmployees, reportParams);
      case 'Payroll Summary':
        return generatePayrollReport(filteredEmployees, reportParams);
      case 'Leave Analysis':
        return generateLeaveReport(filteredLeaveRequests, reportParams);
      case 'Performance Report':
        return generatePerformanceReport(filteredEmployees, reportParams);
      case 'Department Overview':
        return generateDepartmentReport(allEmployees, filteredEmployees, reportParams);
      default:
        const currentDate = new Date().toLocaleDateString();
        const currentTime = new Date().toLocaleTimeString();
        return `
GENERAL REPORT
=============
Generated: ${currentDate} at ${currentTime}
Report Type: ${reportType}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

This report type is not yet implemented.
Please contact system administrator for custom report requirements.

Report Generated by: HR System Quick Actions
Report ID: GEN-${Date.now()}
        `.trim();
    }
  };

  const handleGenerateReport = (reportParams: ReportParams) => {
    if (!reportParams.reportType) {
      toast({
        title: "Validation Error",
        description: "Please select a report type.",
        variant: "destructive"
      });
      return;
    }

    // Generate report content with actual data
    const reportContent = generateReportContent(reportParams.reportType, reportParams);
    
    // Create filename based on report type and current date
    const dateStr = new Date().toISOString().split('T')[0];
    const reportTypeForFile = reportParams.reportType.replace(/\s+/g, '_').toLowerCase();
    const deptSuffix = reportParams.department ? `_${reportParams.department.replace(/\s+/g, '_').toLowerCase()}` : '';
    
    let filename: string;
    let mimeType: string;
    
    switch (reportParams.format.toLowerCase()) {
      case 'pdf':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.pdf`;
        mimeType = 'application/pdf';
        break;
      case 'excel':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.xlsx`;
        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case 'csv':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.csv`;
        mimeType = 'text/csv';
        break;
      default:
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.txt`;
        mimeType = 'text/plain';
    }

    // Download the report
    downloadFile(reportContent, filename, mimeType);

    console.log('Generated report with main system data:', {
      reportType: reportParams.reportType,
      totalEmployees: allEmployees.length,
      totalLeaveRequests: allLeaveRequests.length,
      parameters: reportParams,
      filename: filename
    });

    toast({
      title: "Report Generated Successfully",
      description: `${reportParams.reportType} has been generated from main system records and downloaded as ${filename}`,
    });
  };

  return {
    handleGenerateReport
  };
};
