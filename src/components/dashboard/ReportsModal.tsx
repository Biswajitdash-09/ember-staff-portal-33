import { useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileText, RefreshCw } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import ReportList from './reports/ReportList';
import ReportTemplateGrid from './reports/ReportTemplateGrid';
import ReportGenerationForm from './reports/ReportGenerationForm';
import { reportTemplates } from './reports/reportTemplates';
import { Report, downloadReport } from './reports/reportUtils';
import { generateReportContent } from './reports/ReportContentGenerator';

interface ReportsModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const ReportsModal = ({ isOpen, onClose }: ReportsModalProps) => {
  const { toast } = useToast();
  const [showGenerateForm, setShowGenerateForm] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<number | null>(null);
  const [generateParams, setGenerateParams] = useState({
    dateFrom: '',
    dateTo: '',
    department: '',
    employeeId: ''
  });

  // Enhanced mock reports data with more realistic content
  const [myReports, setMyReports] = useState<Report[]>([
    {
      id: 1,
      title: 'Employee Performance Summary',
      description: 'Quarterly performance review summary for all direct reports',
      type: 'Performance',
      date: '2024-06-20',
      status: 'completed',
      size: '2.4 MB',
      category: 'HR'
    },
    {
      id: 2,
      title: 'HR Metrics Dashboard',
      description: 'Monthly HR metrics including hiring, retention, and satisfaction',
      type: 'HR Analytics',
      date: '2024-06-15',
      status: 'completed',
      size: '1.8 MB',
      category: 'HR'
    },
    {
      id: 3,
      title: 'Payroll Processing Report',
      description: 'Bi-weekly payroll processing summary and exceptions',
      type: 'Payroll',
      date: '2024-06-10',
      status: 'completed',
      size: '3.2 MB',
      category: 'Finance'
    },
    {
      id: 4,
      title: 'System Usage Analytics',
      description: 'Monthly system usage and performance analytics',
      type: 'System',
      date: '2024-06-01',
      status: 'pending',
      size: 'Processing...',
      category: 'System'
    }
  ]);

  const handleDownloadReport = (reportId: number) => {
    const report = myReports.find(r => r.id === reportId);
    if (!report || report.status !== 'completed') {
      toast({
        title: "Download Failed",
        description: "Report is not ready for download.",
        variant: "destructive"
      });
      return;
    }

    // Generate comprehensive report content based on report type
    let content = '';
    const currentDate = new Date().toLocaleDateString();
    
    switch (report.type) {
      case 'Performance':
        content = generateReportContent({ id: 3, title: report.title }, {});
        break;
      case 'HR Analytics':
        content = generateReportContent({ id: 1, title: report.title }, {});
        break;
      case 'Payroll':
        content = generateReportContent({ id: 2, title: report.title }, {});
        break;
      case 'System':
        content = `
SYSTEM USAGE ANALYTICS REPORT
=============================
Generated: ${currentDate}

SYSTEM OVERVIEW:
===============
• Total Users: 156
• Active Sessions: 89
• System Uptime: 99.9%
• Average Response Time: 0.2s

USAGE STATISTICS:
================
• Login Sessions Today: 142
• Page Views: 2,847
• API Calls: 15,634
• Data Transfer: 45.6 GB

PERFORMANCE METRICS:
===================
• CPU Usage: 35%
• Memory Usage: 68%
• Disk Usage: 42%
• Network Latency: 15ms

TOP FEATURES USED:
==================
1. Employee Records: 45%
2. Payroll System: 28%
3. Reports: 15%
4. Settings: 12%

Generated by: Admin User
Report ID: SYS-${Date.now()}
        `.trim();
        break;
      default:
        content = `Report: ${report.title}\nGenerated: ${currentDate}\n\nContent not available.`;
    }

    const filename = `${report.title.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
    downloadReport(content, filename);

    toast({
      title: "Report Downloaded",
      description: `${report.title} has been downloaded successfully.`,
    });
  };

  const handleGenerateReport = (templateId: number) => {
    console.log('Generating report for template ID:', templateId);
    const template = reportTemplates.find(t => t.id === templateId);
    if (!template) {
      console.error('Template not found for ID:', templateId);
      return;
    }

    console.log('Found template:', template);

    // Check if template requires parameters
    if (template.requiresDateRange || template.requiresDepartment) {
      console.log('Template requires parameters, showing form');
      setSelectedTemplate(templateId);
      setShowGenerateForm(true);
      return;
    }

    // Generate report immediately for templates that don't require parameters
    console.log('Generating report immediately');
    const newReport: Report = {
      id: Date.now(),
      title: template.title,
      description: template.description,
      type: template.title,
      date: new Date().toISOString().split('T')[0],
      status: 'completed',
      size: `${(Math.random() * 3 + 1).toFixed(1)} MB`,
      category: template.category
    };

    setMyReports(prev => [newReport, ...prev]);
    
    toast({
      title: "Report Generated",
      description: `${template.title} has been generated successfully.`,
    });

    // Auto-download the generated report
    setTimeout(() => {
      const content = generateReportContent(template, generateParams);
      const filename = `${template.title.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
      downloadReport(content, filename);
    }, 500);
  };

  const handleGenerateWithParams = () => {
    if (selectedTemplate) {
      const template = reportTemplates.find(t => t.id === selectedTemplate);
      if (!template) return;

      const newReport: Report = {
        id: Date.now(),
        title: template.title,
        description: template.description,
        type: template.title,
        date: new Date().toISOString().split('T')[0],
        status: 'completed',
        size: `${(Math.random() * 3 + 1).toFixed(1)} MB`,
        category: template.category
      };

      setMyReports(prev => [newReport, ...prev]);
      
      toast({
        title: "Report Generated",
        description: `${template.title} has been generated successfully.`,
      });

      // Auto-download the generated report
      setTimeout(() => {
        const content = generateReportContent(template, generateParams);
        const filename = `${template.title.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
        downloadReport(content, filename);
      }, 500);

      setShowGenerateForm(false);
      setSelectedTemplate(null);
      setGenerateParams({
        dateFrom: '',
        dateTo: '',
        department: '',
        employeeId: ''
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            My Reports
            <Button
              variant="outline"
              size="sm"
              className="ml-auto"
              onClick={() => {
                // Refresh reports
                toast({
                  title: "Reports Refreshed",
                  description: "Report list has been updated.",
                });
              }}
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Refresh
            </Button>
          </DialogTitle>
          <DialogDescription>
            View, download, and generate reports for your administrative tasks
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Generate Report Form */}
          {showGenerateForm && selectedTemplate && (
            <ReportGenerationForm
              templateTitle={reportTemplates.find(t => t.id === selectedTemplate)?.title || ''}
              params={generateParams}
              onParamsChange={setGenerateParams}
              onGenerate={handleGenerateWithParams}
              onCancel={() => {
                setShowGenerateForm(false);
                setSelectedTemplate(null);
              }}
            />
          )}

          {/* Recent Reports */}
          <ReportList reports={myReports} onDownload={handleDownloadReport} />

          {/* Report Templates */}
          <ReportTemplateGrid templates={reportTemplates} onGenerateReport={handleGenerateReport} />

          {/* Quick Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{myReports.length}</div>
                  <div className="text-sm text-gray-600">Total Reports</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {myReports.filter(r => r.date >= new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().split('T')[0]).length}
                  </div>
                  <div className="text-sm text-gray-600">This Month</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {myReports.filter(r => r.status === 'completed').reduce((acc, r) => acc + parseFloat(r.size.replace(' MB', '')), 0).toFixed(1)}
                  </div>
                  <div className="text-sm text-gray-600">MB Available</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {myReports.filter(r => r.status === 'pending').length}
                  </div>
                  <div className="text-sm text-gray-600">Pending</div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ReportsModal;
